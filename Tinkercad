#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>
#include <Adafruit_NeoPixel.h>

// LCD
LiquidCrystal_I2C lcd(0x20, 16, 2);

// NeoPixel
const byte PIN_NEOPIXEL = 13;
const byte NUM_PIXELS = 12;

Adafruit_NeoPixel pixels(NUM_PIXELS, PIN_NEOPIXEL, NEO_GRB + NEO_KHZ800);

// Keypad
const byte FILAS = 4;
const byte COLS = 4;
char teclas[FILAS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte pinesFilas[FILAS] = {9, 8, 7, 6};
byte pinesCols[COLS] = {5, 4, 3, 2};
Keypad keypad = Keypad(makeKeymap(teclas), pinesFilas, pinesCols, FILAS, COLS);

// Pines
const byte BUZZER_PIN =10;
const byte LUZ_PIN =11;
const byte PUERTA_PIN =12;


// Estado
bool programaEnCurso = false;
bool cancelar = false;
char ultimaTecla = NO_KEY;

// Programa D (personalizado)
int dTiempoCalentar = 10;
int dTiempoPausa = 5;
int dRepeticiones = 2;

void setup() {
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Microondas listo");

  pixels.begin();
  pixels.setBrightness(255);
  pixels.clear();
  pixels.show();

  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(LUZ_PIN, OUTPUT);
  pinMode(PUERTA_PIN, INPUT_PULLUP);
}

void loop() {
  char tecla = keypad.getKey();
  if (tecla != NO_KEY) {
    ultimaTecla = tecla;  // guarda última tecla
    // Cancelar desde el menú también
    if (tecla == '*') {
      cancelar = true;
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Cancelado");
      apagarTodo();
      delay(1000);
      return;
    }

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Tecla: ");
    lcd.print(tecla);

    // Tecla 0: no hace nada
    if (tecla == '0') return;

    // Teclas 1–9: cocción rápida
    if (tecla >= '1' && tecla <= '9') {
      int rep = tecla - '0';
      ejecutarPrograma("Coccion rapida", 30, 0, rep);
      return;
    }

    // Programas fijos
    if (tecla == 'A') ejecutarPrograma("Coccion rapida", 30, 0, 1);
    if (tecla == 'B') ejecutarPrograma("Descongelar", 20, 10, 5);
    if (tecla == 'C') ejecutarPrograma("Recalentar", 15, 3, 3);

    // Personalizado
    if (tecla == 'D') ejecutarPrograma("Personalizado", dTiempoCalentar, dTiempoPausa, dRepeticiones);

    // Configurar programa D
    if (tecla == '#') configurarProgramaD();
  }
}

void ejecutarPrograma(String nombre, int tiempoCalentar, int tiempoPausa, int repeticiones) {
  if (!puertaCerrada()) {
    lcd.clear();
    lcd.print("Puerta abierta");
    luzInterior(true);
    mostrarPuertaAbierta();
    return;
  }

  programaEnCurso = true;
  cancelar = false;

  lcd.clear();
  lcd.print(nombre);
  luzInterior(true);
  
  for (int i = 0; i < repeticiones && !cancelar; i++) {
    // Fase de calentamiento
    lcd.setCursor(0, 1);
    lcd.print("Calentando...");

    unsigned long tiempoRestante = tiempoCalentar * 1000UL;
    unsigned long inicio = millis();
    tone(BUZZER_PIN, 2000);

    while (tiempoRestante > 0 && !cancelar) {
     chequearCancelacion();
      if (cancelar) {
        lcd.clear();
        lcd.print("Cancelado");
        apagarTodo();
        delay(1000);
        break;
      }

      if (!puertaCerrada()) {
        pausaPorPuerta();
        if (cancelar) {
          lcd.clear();
          lcd.print("Cancelado");
          apagarTodo();
          delay(1000);
          break;
        }
        tone(BUZZER_PIN, 2000);
        inicio = millis();
      }
      actualizarLCD("Calentando", tiempoRestante / 1000);
      chequearCancelacion();
       if (cancelar) {
         lcd.clear();
         lcd.print("Cancelado");
         apagarTodo();
         delay(1000);
         break;
       }
      unsigned long ahora = millis();
      unsigned long transcurrido = ahora - inicio;
      if (transcurrido >= tiempoRestante) break;
      tiempoRestante -= transcurrido;
      inicio = ahora;

      platoGirando();
      delay(100);
    }

    noTone(BUZZER_PIN);
    chequearCancelacion();
    if (cancelar) {
      lcd.clear();
      lcd.print("Cancelado");
      apagarTodo();
      delay(1000);
      break;
    }
    // Fase de pausa (entre ciclos)
    if (tiempoPausa > 0 && !cancelar) {
      lcd.setCursor(0, 1);
      lcd.print("En pausa...");

      unsigned long pausaRestante = tiempoPausa * 1000UL;
      unsigned long pausaInicio = millis();
      tone(BUZZER_PIN, 1000);

      while (pausaRestante > 0 && !cancelar) {
        chequearCancelacion();
        if (cancelar) {
          lcd.clear();
          lcd.print("Cancelado");
          apagarTodo();
          delay(1000);
          break;
        }

        if (!puertaCerrada()) {
          pausaPorPuerta();
          chequearCancelacion();
          if (cancelar) {
            lcd.clear();
            lcd.print("Cancelado");
            apagarTodo();
            delay(1000);
            break;
          }
          tone(BUZZER_PIN, 1000);
          pausaInicio = millis();
        }
        actualizarLCD("En pausa", pausaRestante / 1000);

        unsigned long ahora = millis();
        unsigned long transcurrido = ahora - pausaInicio;
        if (transcurrido >= pausaRestante) break;

        pausaRestante -= transcurrido;
        pausaInicio = ahora;

        platoTitilando();
        delay(100);
      }

      noTone(BUZZER_PIN);
    }
  }

  apagarTodo();

  if (!cancelar) {
    lcd.clear();
    lcd.print("Fin de Programa");
    alarmaFinal();
    delay(1500);
  }

  programaEnCurso = false;
  ultimaTecla = NO_KEY;  // limpiar para próxima ejecución
}


void actualizarLCD(String fase, unsigned long segundosRestantes) {
  if (segundosRestantes == 0) return; // no mostrar 0
  lcd.setCursor(0, 0);
  lcd.print("                "); // limpia línea
  lcd.setCursor(0, 0);
  lcd.print(fase);
  
  lcd.setCursor(0, 1);
  lcd.print("Faltan: ");
  lcd.print(segundosRestantes);
  lcd.print("s     ");
}

void platoGirando() {//
  static int pos = 0;
  pixels.clear();
  pixels.setPixelColor(pos, pixels.Color(255, 0, 0)); // rojo
  pixels.show();
  pos = (pos + 1) % NUM_PIXELS;
}

void platoTitilando() {//
  static bool estado = false;
  estado = !estado;
  for (int i = 0; i < NUM_PIXELS; i++) {
    if (estado) {
        pixels.setPixelColor(i, pixels.Color(255, 255, 0));  // Amarillo
    } else {
        pixels.setPixelColor(i, 0);  // Apagado
    }
  }
  pixels.show();
}


void mostrarPuertaAbierta() {//
  for (int i = 0; i < NUM_PIXELS; i++) {
    pixels.setPixelColor(i, pixels.Color(0, 255, 0)); // verde
  }
  pixels.show();
 
}

bool puertaCerrada() {//
  return digitalRead(PUERTA_PIN) == HIGH;
}

void pausaPorPuerta() {//
  lcd.clear();
  lcd.print("Puerta abierta"); 
  mostrarPuertaAbierta();
  luzInterior(true);
 
  noTone(BUZZER_PIN);

  while (!puertaCerrada()) {
    char t = keypad.getKey();
    if (t == '*') {
      cancelar = true;
      lcd.clear();
      lcd.print("Cancelado");
      apagarTodo();
      delay(1000);
      return;
    }
    delay(100);
  }

  lcd.clear();
  lcd.print("Puerta cerrada");
  delay(500);
}

void luzInterior(bool encender) {//
  if (encender) {
     digitalWrite(LUZ_PIN, HIGH);
  } else {
     digitalWrite(LUZ_PIN, LOW);
  }
}

void apagarTodo() {//
  pixels.clear();
  pixels.show();
  noTone(BUZZER_PIN);
  luzInterior(false);
}

void alarmaFinal() {//
  for (int i = 0; i < 3; i++) {
    tone(BUZZER_PIN, 2500, 300);
    delay(400);
  }
}

void configurarProgramaD() {//
  lcd.clear();
  lcd.print("Tiempo calor (s):");
  dTiempoCalentar = leerNumeroDesdeKeypad();
  if (cancelar) return;

  lcd.clear();
  lcd.print("Tiempo pausa (s):");
  dTiempoPausa = leerNumeroDesdeKeypad();
  if (cancelar) return;

  lcd.clear();
  lcd.print("Repeticiones:");
  dRepeticiones = leerNumeroDesdeKeypad();
  if (cancelar) return;

  lcd.clear();
  lcd.print("Guardado OK");
  delay(1000);
}

int leerNumeroDesdeKeypad() {//
  String numero = "";
  char tecla;
  cancelar = false;

  lcd.setCursor(0, 1);
  lcd.print("> ");

  while (true) {
    tecla = keypad.getKey();
    if (tecla >= '0' && tecla <= '9') {
      numero += tecla;
      lcd.print(tecla);
    } else if (tecla == '*') {
      cancelar = true;
      lcd.clear();
      lcd.print("Cancelado");
      delay(1000);
      return 0;
    } else if (tecla == '#') {
      break;
    }
  }

  return numero.toInt();
}

void chequearCancelacion() {//
  char tecla = keypad.getKey();
  if (tecla == '*') {
    cancelar = true;
  }
}

